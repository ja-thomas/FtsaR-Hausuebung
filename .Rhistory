install.packages("tseries")
library(tseries)
x <- get.hist.quote(start="2006-01-01", instrument="vow.de", quote="AdjClose")
y <- get.hist.quote(start="2006-01-01", instrument="dai.de", quote="AdjClose")
rx <-diff(log(x))
ry <- diff(log(y))
list(rx, ry)
install.packages("timeDate")
library(timeDate)
lapply(list(x, y), function(x) c(mean = mean(x), var = var(x), skew = skewness(x), kurt = kurtosis(x)))
sapply(list(x, y), function(x) c(mean = mean(x), var = var(x), skew = skewness(x), kurt = kurtosis(x)))
sapply(list(vow = x,  dai = y), function(x) c(mean = mean(x), var = var(x), skew = skewness(x), kurt = kurtosis(x)))
sapply(list(vow = rx,  dai = ry), function(x) c(mean = mean(x), var = var(x), skew = skewness(x), kurt = kurtosis(x)))
install.packages("mass")
install.packages("MASS")
library(MASS)
truehist(rx)
d <- sapply(list(vow = rx,  dai = ry), function(x) c(mean = mean(x), var = var(x), skew = skewness(x), kurt = kurtosis(x)))
dnorm(seq(-1, 1, by = 0.01), mean = d[1,1], var = sqrt(d[2,1]))
dnorm(seq(-1, 1, by = 0.01), mean = d[1,1], sd = sqrt(d[2,1]))
line(dnorm(seq(-1, 1, by = 0.01), mean = d[1,1], sd = sqrt(d[2,1])))
lines(dnorm(seq(-1, 1, by = 0.01), mean = d[1,1], sd = sqrt(d[2,1])))
d[1,1]
sqrt(d[2,1])
d
curve(dnorm(seq(-1, 1, by = 0.01), mean = d[1,1], sd = sqrt(d[2,1])))
lines(dnorm(seq(-1, 1, by = 0.01), mean = d[1,1], sd = sqrt(d[2,1])))
plot(dnorm(seq(-1, 1, by = 0.01), mean = d[1,1], sd = sqrt(d[2,1])))
plot(dnorm(seq(-1, 1, by = 0.01), mean = d[1,1], sd = sqrt(d[2,1])), type = "l")
lines(x = seq(-1, 1, by = 0.01) ,y = dnorm(seq(-1, 1, by = 0.01), mean = d[1,1], sd = sqrt(d[2,1])), type = "l")
quote(x)
def.par <- par(no.readonly = TRUE) # save default, for resetting...
## divide the device into two rows and two columns
## allocate figure 1 all of row 1
## allocate figure 2 the intersection of column 2 and row 2
layout(matrix(c(1,1,0,2), 2, 2, byrow = TRUE))
## show the regions that have been allocated to each plot
layout.show(2)
lines(x = seq(-1, 1, by = 0.01) ,y = dnorm(seq(-1, 1, by = 0.01), mean = d[1,1], sd = sqrt(d[2,1])), type = "l")
ts.plot(rx)
ts.plot(rx^2)
ts.plot(sqrt(rx))
ts.plot(log(rx))
ts.plot(rx^3)
dev.off()
lapply(list(rx, ry), function(x) c(ts.plot(x),ts.plot(rx^2), ts.plot(rx^3)))
par.mfrow(c(1,3))
par(mfrow = c(1,3))
lapply(list(rx, ry), function(x) c(ts.plot(x),ts.plot(rx^2), ts.plot(rx^3)))
par(mfrow = c(3,1))
lapply(list(rx, ry), function(x) c(ts.plot(x),ts.plot(rx^2), ts.plot(rx^3)))
lapply(list(rx, ry), function(x) c(acf(x),acf(rx^2), acf(rx^3)))
lapply(list(rx, ry), function(x) c(acf(x, na.action ="na.pass"),acf(rx^2, na.action ="na.pass"), acf(rx^3, na.action ="na.pass")))
lapply(list(rx, ry), function(x) c(acf(x, na.action ="na.pass"),acf(x^2, na.action ="na.pass"), acf(x^3, na.action ="na.pass")))
acf(x, na.action ="na.pass")
acf(rx, na.action ="na.pass")
acf(rx, na.action =na.pass)
lapply(list(rx, ry), function(x) c(acf(x, na.action =na.pass),acf(x^2, na.action =na.pass), acf(x^3, na.action =na.pass)))
lapply(list(rx, ry), function(x) c(plot(acf(x, na.action =na.pass)),plot(acf(x^2, na.action =na.pass)), plot(acf(x^3, na.action =na.pass))))
ts.plot(rx)
par(mfrow = c(3,1))
ts.plot(rx)
ts.plot(rx^2)
ts.plot(rx^3)
acf(rx)
par(mfrow = c(3,1))
ts.plot(rx)
ts.plot(abs(rx))
ts.plot(rx^2)
acf(rx, na.action = na.pass)
acf(rx^2, na.action = na.pass)
acf(rx^3, na.action = na.pass)
acf(rx, na.action = na.pass, main = "rx normal")
call()
call(rx)
call("rx")
match.call()
bla <- function(x){
print(match.call())
ts.plot(x)
}
bla(rx)
bla <- function(x){
print(match.call()$x)
ts.plot(x)
}
debug(bla)
bla <- function(x){
print(match.call())
ts.plot(x)
}
bla <- function(x){
}
bla <- function(x){
print(match.call())
ts.plot(x)
}
bla(rx)
debug(bla)
bla(rx)
match.call()
a = match.call()
str(a)
a$x
match.call()$x
str(match.call()$x)
quote(match.call()$x)
deparse(match.call()$x)
acf(x,  main =" bla")
acf(x,  main =" bla", na.action=na.pass)
bla(rx)
match.call()
match.call()$x
deparse(match.call()$x)
substitute(match.call()$x)
deparse(match.call()$x)
str(rx)
rm(bla)
coredata
install.packages("zoo")
install.packages("zoo")
install.packages(c("forecast", "car"))
ccf(rx, ry)
rx
str(rx)
str(ry)
library(zoo)
ccf(rx, ry)
ccf(coredata(rx), coredata(ry))
cor(coredata(rx), coredata(ry))
ccf(coredata(rx), coredata(ry))
as.ts(rx)
ccf(as.ts(rx), as.ts(ry))
coredata(rx)
str(coredata(rx))
as.ts(rx)
str(as.ts(rx))
dimnames(rx)
dimnames(rx) <- NULL
dimnames(ry) <- NULL
ccf(rx, ry)
ccf(coredata(rx), coredata(ry))
ccf(rnorm(100), rnorm(100))
ccf(rx, rnorm(100))
ccf(rx)
str(rx)
ccf(as.numeric(rx), as.numeric(ry))
par(mfrow = c(1,1))
ccf(as.numeric(rx), as.numeric(ry))
is.na(as.numeric(rx))
sum(is.na(as.numeric(rx)))
rx <-diff(log(x))
ry <- diff(log(y))
sum(is.na(as.numeric(rx)))
ccf(as.numeric(rx), as.numeric(ry))
x <- get.hist.quote(start="2006-01-01", instrument="vow.de", quote="AdjClose")
y <- get.hist.quote(start="2006-01-01", instrument="dai.de", quote="AdjClose")
library(tseries)
x <- get.hist.quote(start="2006-01-01", instrument="vow.de", quote="AdjClose")
y <- get.hist.quote(start="2006-01-01", instrument="dai.de", quote="AdjClose")
# Create returns
rx <-diff(log(x))
ry <- diff(log(y))
ccf(as.numeric(rx), as.numeric(ry))
